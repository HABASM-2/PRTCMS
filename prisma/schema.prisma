generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organisation {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  status       String        @default("active")
  createdBy    User          @relation("CreatedBy", fields: [createdById], references: [id])
  createdById  Int
  orgUnits     OrgUnit[]
  createdAt    DateTime      @default(now())
  activityLogs ActivityLog[]

  users User[] @relation("UserOrganisations") // ← this is the missing field
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  username String @unique
  password String

  // roleId       Int? // role is optional
  // role         Role?  @relation(fields: [roleId], references: [id])
  roles        Role[] @relation("UserRoles")
  createdById  Int?
  createdBy    User?  @relation("CreatedUsers", fields: [createdById], references: [id])
  createdUsers User[] @relation("CreatedUsers")

  organisations  Organisation[]   @relation("UserOrganisations")
  Organisation   Organisation[]   @relation("CreatedBy")
  managerTag     String?
  ActivityLog    ActivityLog[]
  SessionLogs    SessionLog[] // ← NEW
  createdAt      DateTime         @default(now())
  UserOrgUnit    UserOrgUnit[]
  ProposalNotice ProposalNotice[]
  SubmitProposal SubmitProposal[]
  ProposalReview ProposalReview[]
  FinalDecision  FinalDecision[]
}

model ActivityLog {
  id             Int          @id @default(autoincrement())
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId Int
  action         String
  reason         String?
  performedBy    User         @relation(fields: [performedById], references: [id])
  performedById  Int
  createdAt      DateTime     @default(now())
}

model OrgUnit {
  id             Int          @id @default(autoincrement())
  name           String
  tag            String?
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId Int

  parent         OrgUnit?         @relation("ParentChild", fields: [parentId], references: [id])
  parentId       Int?
  children       OrgUnit[]        @relation("ParentChild")
  createdAt      DateTime         @default(now())
  UserOrgUnit    UserOrgUnit[]
  ProposalNotice ProposalNotice[]
  SubmitProposal SubmitProposal[]
}

model SessionLog {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  ipAddress String? // Optional: log IP if available
  userAgent String? // Optional: browser info
  loginAt   DateTime  @default(now())
  logoutAt  DateTime? // Optional: null if not logged out yet
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]   @relation("UserRoles")
  createdAt DateTime @default(now())
}

model UserOrgUnit {
  userId    Int
  orgUnitId Int

  user    User    @relation(fields: [userId], references: [id])
  orgUnit OrgUnit @relation(fields: [orgUnitId], references: [id])

  assignedAt DateTime @default(now())

  @@id([userId, orgUnitId])
}

model ProposalNotice {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  fileUrl        String? // Optional link to file or attachment
  orgUnit        OrgUnit          @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  orgUnitId      Int
  createdBy      User             @relation(fields: [createdById], references: [id])
  createdById    Int
  expiredAt      DateTime
  createdAt      DateTime         @default(now())
  SubmitProposal SubmitProposal[]

  type     NoticeType @default(JUST_NOTICE)
  isActive Boolean    @default(true)

  hidden Boolean @default(false)

  @@index([orgUnitId])
  @@index([createdById])
}

model SubmitProposal {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  participants String[]
  fileUrl      String?

  submittedBy   User @relation(fields: [submittedById], references: [id])
  submittedById Int

  notice   ProposalNotice @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  noticeId Int

  orgUnit   OrgUnit @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  orgUnitId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  versions      ProposalVersion[]
  finalDecision FinalDecision?

  @@unique([submittedById, noticeId]) // prevent duplicate submissions
  @@index([submittedById])
  @@index([noticeId])
  @@index([orgUnitId])
}

model FinalDecision {
  id               Int            @id @default(autoincrement())
  submitProposal   SubmitProposal @relation(fields: [submitProposalId], references: [id], onDelete: Cascade)
  submitProposalId Int            @unique

  status      ReviewStatus
  reason      String?
  decidedBy   User         @relation(fields: [decidedById], references: [id])
  decidedById Int
  decidedAt   DateTime     @default(now())
}

model ProposalVersion {
  id               Int            @id @default(autoincrement())
  submitProposal   SubmitProposal @relation(fields: [submitProposalId], references: [id], onDelete: Cascade)
  submitProposalId Int

  versionNumber Int // e.g., 1, 2, 3 for each round/version
  title         String
  description   String?
  participants  String[]
  fileUrl       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews ProposalReview[]

  @@unique([submitProposalId, versionNumber])
  @@index([submitProposalId])
}

model ProposalReview {
  id                Int             @id @default(autoincrement())
  proposalVersion   ProposalVersion @relation(fields: [proposalVersionId], references: [id], onDelete: Cascade)
  proposalVersionId Int

  reviewer   User @relation(fields: [reviewerId], references: [id])
  reviewerId Int

  status    ReviewStatus
  comments  String?
  createdAt DateTime     @default(now())

  @@unique([proposalVersionId, reviewerId])
  @@index([proposalVersionId])
  @@index([reviewerId])
}

enum ReviewStatus {
  PENDING
  ACCEPTED
  REJECTED
  NEEDS_MODIFICATION
}

enum NoticeType {
  JUST_NOTICE
  CONCEPT_NOTE
  PROPOSAL
}
