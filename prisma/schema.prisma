generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organisation {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  status       String        @default("active")
  createdBy    User          @relation("CreatedBy", fields: [createdById], references: [id])
  createdById  Int
  orgUnits     OrgUnit[]
  createdAt    DateTime      @default(now())
  activityLogs ActivityLog[]

  users User[] @relation("UserOrganisations") // ← this is the missing field
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  username String @unique
  password String

  roleId       Int? // role is optional
  role         Role?  @relation(fields: [roleId], references: [id])
  createdById  Int?
  createdBy    User?  @relation("CreatedUsers", fields: [createdById], references: [id])
  createdUsers User[] @relation("CreatedUsers")

  organisations Organisation[] @relation("UserOrganisations")
  Organisation  Organisation[] @relation("CreatedBy")
  ActivityLog   ActivityLog[]
  SessionLogs   SessionLog[] // ← NEW
  createdAt     DateTime       @default(now())
  UserOrgUnit   UserOrgUnit[]
}

model ActivityLog {
  id             Int          @id @default(autoincrement())
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId Int
  action         String
  reason         String?
  performedBy    User         @relation(fields: [performedById], references: [id])
  performedById  Int
  createdAt      DateTime     @default(now())
}

model OrgUnit {
  id             Int          @id @default(autoincrement())
  name           String
  tag            String?
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId Int

  parent      OrgUnit?      @relation("ParentChild", fields: [parentId], references: [id])
  parentId    Int?
  children    OrgUnit[]     @relation("ParentChild")
  createdAt   DateTime      @default(now())
  UserOrgUnit UserOrgUnit[]
}

model SessionLog {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  ipAddress String? // Optional: log IP if available
  userAgent String? // Optional: browser info
  loginAt   DateTime  @default(now())
  logoutAt  DateTime? // Optional: null if not logged out yet
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
}

model UserOrgUnit {
  userId    Int
  orgUnitId Int

  user    User    @relation(fields: [userId], references: [id])
  orgUnit OrgUnit @relation(fields: [orgUnitId], references: [id])

  assignedAt DateTime @default(now())

  @@id([userId, orgUnitId])
}
