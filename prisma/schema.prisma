generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------- Organisation -------------------
model Organisation {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  status       String        @default("active")
  createdBy    User          @relation("CreatedBy", fields: [createdById], references: [id])
  createdById  Int
  orgUnits     OrgUnit[]
  createdAt    DateTime      @default(now())
  activityLogs ActivityLog[]

  users            User[]             @relation("UserOrganisations") // Users assigned to organisation
  CentralCommittee CentralCommittee[]
}

// ------------------- User -------------------
model User {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  username String @unique
  password String

  roles        Role[] @relation("UserRoles")
  createdById  Int?
  createdBy    User?  @relation("CreatedUsers", fields: [createdById], references: [id])
  createdUsers User[] @relation("CreatedUsers")

  organisations Organisation[] @relation("UserOrganisations")
  Organisation  Organisation[] @relation("CreatedBy") // Organisations created by user

  managerTag                String?
  ActivityLog               ActivityLog[]
  SessionLogs               SessionLog[]
  createdAt                 DateTime                @default(now())
  UserOrgUnit               UserOrgUnit[]
  ProposalNotice            ProposalNotice[]
  SubmitProposal            SubmitProposal[]
  ProposalReview            ProposalReview[]
  FinalDecision             FinalDecision[]
  ProposalReviewComment     ProposalReviewComment[]
  coordinatorForDepartments Json?

  // Relation for ProposalNoticeForward
  forwardedNotices ProposalNoticeForward[] @relation("UserForwarded")
  receivedNotices  ProposalNoticeForward[] @relation("UserReceived")

  isApproved Boolean @default(false) // false = not approved, true = approved

  // Relation for ProposalForwarding (as forwarder)
  forwardedProposals     ProposalForwarding[]     @relation("ProposalForwardedBy")
  CentralCommittee       CentralCommittee[]
  CentralCommitteeMember CentralCommitteeMember[]
  CommitteeDecision      CommitteeDecision[]
  CommitteeMessage       CommitteeMessage[]
  DirectorApproval       DirectorApproval[]
  ProjectTask            ProjectTask[]
}

// ------------------- ActivityLog -------------------
model ActivityLog {
  id             Int          @id @default(autoincrement())
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId Int
  action         String
  reason         String?
  performedBy    User         @relation(fields: [performedById], references: [id])
  performedById  Int
  createdAt      DateTime     @default(now())
}

// ------------------- OrgUnit -------------------
model OrgUnit {
  id             Int          @id @default(autoincrement())
  name           String
  tag            String?
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId Int

  parent    OrgUnit?  @relation("ParentChild", fields: [parentId], references: [id])
  parentId  Int?
  children  OrgUnit[] @relation("ParentChild")
  createdAt DateTime  @default(now())

  UserOrgUnit           UserOrgUnit[]
  SubmitProposal        SubmitProposal[]
  ProposalNoticeOrgUnit ProposalNoticeOrgUnit[]
  forwardedNotices      ProposalNoticeForward[]
  ProposalForwarding    ProposalForwarding[]
}

// ------------------- SessionLog -------------------
model SessionLog {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  ipAddress String?
  userAgent String?
  loginAt   DateTime  @default(now())
  logoutAt  DateTime?
}

// ------------------- Role -------------------
model Role {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  users              User[]               @relation("UserRoles")
  createdAt          DateTime             @default(now())
  ProposalForwarding ProposalForwarding[]
}

// ------------------- UserOrgUnit -------------------
model UserOrgUnit {
  userId    Int
  orgUnitId Int

  user    User    @relation(fields: [userId], references: [id])
  orgUnit OrgUnit @relation(fields: [orgUnitId], references: [id])

  assignedAt DateTime @default(now())

  @@id([userId, orgUnitId])
}

// ------------------- ProposalNotice -------------------
model ProposalNotice {
  id             Int                     @id @default(autoincrement())
  title          String
  description    String?
  fileUrl        String?
  orgUnits       ProposalNoticeOrgUnit[]
  createdBy      User                    @relation(fields: [createdById], references: [id])
  createdById    Int
  expiredAt      DateTime
  createdAt      DateTime                @default(now())
  SubmitProposal SubmitProposal[]

  type          NoticeType @default(JUST_NOTICE)
  consideredFor String?

  isActive Boolean @default(true)
  hidden   Boolean @default(false)

  // New relation to forwarding
  forwards ProposalNoticeForward[] @relation("NoticeForwarded")

  @@index([createdById])
}

// ------------------- ProposalNoticeOrgUnit -------------------
model ProposalNoticeOrgUnit {
  proposalNotice   ProposalNotice @relation(fields: [proposalNoticeId], references: [id], onDelete: Cascade)
  proposalNoticeId Int

  orgUnit   OrgUnit @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  orgUnitId Int

  @@id([proposalNoticeId, orgUnitId])
}

// ------------------- ProposalNoticeForward -------------------
model ProposalNoticeForward {
  proposalNotice   ProposalNotice @relation("NoticeForwarded", fields: [proposalNoticeId], references: [id], onDelete: Cascade)
  proposalNoticeId Int

  orgUnit   OrgUnit @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  orgUnitId Int

  user   User @relation("UserReceived", fields: [userId], references: [id])
  userId Int

  forwardedBy   User @relation("UserForwarded", fields: [forwardedById], references: [id])
  forwardedById Int

  forwardedAt DateTime @default(now())

  @@id([proposalNoticeId, orgUnitId, userId])
  @@index([proposalNoticeId])
  @@index([userId])
  @@index([orgUnitId])
}

// ------------------- SubmitProposal -------------------
model SubmitProposal {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  participants String[]
  fileUrl      String?

  submittedBy   User @relation(fields: [submittedById], references: [id])
  submittedById Int

  notice   ProposalNotice @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  noticeId Int

  orgUnit   OrgUnit @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  orgUnitId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  versions           ProposalVersion[]
  finalDecision      FinalDecision?
  ProposalForwarding ProposalForwarding[]
  CommitteeDecision  CommitteeDecision[]
  DirectorApproval   DirectorApproval[]
  Project            Project?

  @@unique([submittedById, noticeId])
  @@index([submittedById])
  @@index([noticeId])
  @@index([orgUnitId])
}

model ProposalForwarding {
  id Int @id @default(autoincrement())

  // The proposal being forwarded
  submitProposal   SubmitProposal @relation(fields: [submitProposalId], references: [id])
  submitProposalId Int

  // The Head who forwards
  forwardedBy   User @relation("ProposalForwardedBy", fields: [forwardedById], references: [id])
  forwardedById Int

  // The OrgUnit and Role to which the proposal is forwarded
  forwardedToOrgUnit   OrgUnit @relation(fields: [forwardedToOrgUnitId], references: [id])
  forwardedToOrgUnitId Int

  forwardedToRole   Role @relation(fields: [forwardedToRoleId], references: [id])
  forwardedToRoleId Int

  forwardedAt DateTime @default(now())
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  remarks     String?

  @@index([submitProposalId])
  @@index([forwardedById])
  @@index([forwardedToOrgUnitId])
  @@index([forwardedToRoleId])
}

// ------------------- FinalDecision -------------------
model FinalDecision {
  id               Int            @id @default(autoincrement())
  submitProposal   SubmitProposal @relation(fields: [submitProposalId], references: [id], onDelete: Cascade)
  submitProposalId Int            @unique

  status      ReviewStatus
  reason      String?
  decidedBy   User         @relation(fields: [decidedById], references: [id])
  decidedById Int
  decidedAt   DateTime     @default(now())
}

// ------------------- ProposalVersion -------------------
model ProposalVersion {
  id               Int            @id @default(autoincrement())
  submitProposal   SubmitProposal @relation(fields: [submitProposalId], references: [id], onDelete: Cascade)
  submitProposalId Int

  versionNumber Int
  title         String
  description   String?
  participants  String[]
  fileUrl       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type            NoticeType @default(CONCEPT_NOTE)
  resubmitAllowed Boolean    @default(false)

  reviews ProposalReview[]

  @@unique([submitProposalId, versionNumber])
  @@index([submitProposalId])
}

// ------------------- ProposalReview -------------------
model ProposalReview {
  id                Int             @id @default(autoincrement())
  proposalVersion   ProposalVersion @relation(fields: [proposalVersionId], references: [id], onDelete: Cascade)
  proposalVersionId Int

  reviewer   User @relation(fields: [reviewerId], references: [id])
  reviewerId Int

  status                ReviewStatus
  comments              String?
  createdAt             DateTime                @default(now())
  ProposalReviewComment ProposalReviewComment[]

  @@unique([proposalVersionId, reviewerId])
  @@index([proposalVersionId])
  @@index([reviewerId])
}

// ------------------- ProposalReviewComment -------------------
model ProposalReviewComment {
  id               Int            @id @default(autoincrement())
  proposalReview   ProposalReview @relation(fields: [proposalReviewId], references: [id], onDelete: Cascade)
  proposalReviewId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  @@index([proposalReviewId])
  @@index([authorId])
}

// ------------------- Central Committee -------------------
model CentralCommittee {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime @default(now())

  // Optional link to an organisation (if committees are org-based)
  organisation   Organisation? @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId Int?

  members   CentralCommitteeMember[]
  decisions CommitteeDecision[]
  messages  CommitteeMessage[]
}

model CentralCommitteeMember {
  committeeId Int
  userId      Int

  committee CentralCommittee @relation(fields: [committeeId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  role     String   @default("MEMBER") // DIRECTOR, MEMBER, SECRETARY, etc.
  joinedAt DateTime @default(now())

  @@id([committeeId, userId])
}

model CommitteeDecision {
  id          Int              @id @default(autoincrement())
  committee   CentralCommittee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId Int

  // Decision is tied to a proposal (can extend later for notices too)
  proposal   SubmitProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId Int

  decidedBy   User @relation(fields: [decidedById], references: [id])
  decidedById Int

  decision  ReviewStatus
  remarks   String?
  decidedAt DateTime     @default(now())

  @@index([committeeId])
  @@index([proposalId])
}

model CommitteeMessage {
  id                 Int               @id @default(autoincrement())
  proposalId         Int?
  senderId           Int?
  sender             User?             @relation(fields: [senderId], references: [id])
  content            String
  fileURL            String?
  createdAt          DateTime          @default(now())
  CentralCommittee   CentralCommittee? @relation(fields: [centralCommitteeId], references: [id])
  centralCommitteeId Int?
}

// ------------------- DirectorApproval -------------------
model DirectorApproval {
  id               Int            @id @default(autoincrement())
  submitProposal   SubmitProposal @relation(fields: [submitProposalId], references: [id], onDelete: Cascade)
  submitProposalId Int

  director   User @relation(fields: [directorId], references: [id])
  directorId Int

  status         ReviewStatus @default(PENDING)
  reason         String? // Reason for approval/rejection
  considerations String? // Optional: other notes or considerations
  signedFileUrl  String? // Optional uploaded signed document

  approvedAt DateTime? // Date of decision
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([submitProposalId])
  @@index([directorId])
}

model Project {
  id               Int            @id @default(autoincrement())
  submitProposal   SubmitProposal @relation(fields: [submitProposalId], references: [id], onDelete: Cascade)
  submitProposalId Int            @unique // one proposal can become one project

  title       String
  description String?
  status      ProjectStatus @default(ONGOING)
  startDate   DateTime      @default(now())
  endDate     DateTime?
  totalBudget Float?        @default(0) // <- new field

  budgets   ProjectBudget[]
  tasks     ProjectTask[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ProjectBudget {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  item        String
  amount      Float
  spent       Float    @default(0)
  allocatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectTask {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  title        String
  description  String?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  assignedToId Int?

  status    TaskStatus @default(PENDING)
  dueDate   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// ------------------- Enums -------------------
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ReviewStatus {
  PENDING
  ACCEPTED
  REJECTED
  NEEDS_MODIFICATION
}

enum NoticeType {
  JUST_NOTICE
  CONCEPT_NOTE
  PROPOSAL
}
